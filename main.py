import asyncio
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import logging
import html
import logging.handlers
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards import (
    get_user_keyboard, 
    get_admin_keyboard, 
    get_mixed_keyboard,
    get_payment_confirmation_keyboard,
    get_admin_payment_confirmation_keyboard,
    get_cancel_keyboard,
    get_back_keyboard
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å ID –∞–¥–º–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
ADMINS = [int(admin_id.strip()) for admin_id in ADMIN_IDS_STR.split(",") if admin_id.strip()]
if not ADMINS:
    raise ValueError("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –î–Ω–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
PAYMENT_TIMEOUT_DAYS = int(os.getenv("PAYMENT_TIMEOUT_DAYS", "1"))

# –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI = {
    'success': '‚úÖ',
    'error': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'info': 'üí°',
    'money': 'üí∞',
    'clock': '‚è∞',
    'calendar': 'üìÖ',
    'user': 'üë§',
    'admin': 'üë®‚Äçüíº',
    'chat': 'üí¨',
    'stats': 'üìä',
    'settings': '‚öôÔ∏è',
    'back': 'üîô',
    'cancel': '‚ùå',
    'add': '‚ûï',
    'remove': '‚ûñ',
    'list': 'üìã',
    'search': 'üîç',
    'alert': 'üö®',
    'bell': 'üîî',
    'check': '‚úîÔ∏è',
    'loading': '‚è≥',
    'rocket': 'üöÄ',
    'broadcast': 'üì¢'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_user_id = State()
    waiting_day = State()
    waiting_time = State()
    waiting_message = State()
    waiting_unlink_user = State()
    waiting_confirm_payment = State()
    waiting_alias = State()
    waiting_default_message = State()
    chatting_with_user = State()

class UserStates(StatesGroup):
    chatting_with_admin = State()
    admin_mode = State()
    user_mode = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    return html.escape(str(text))

def format_user_info(user_id: int, user_name: str = None, username: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    info = f"{EMOJI['user']} "
    if user_name:
        info += f"<b>{escape_html(user_name)}</b> "
    if username:
        info += f"(@{escape_html(username)}) "
    info += f"\nüÜî ID: <code>{user_id}</code>"
    return info

def format_date(date: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    return date.strftime('%d.%m.%Y %H:%M')

def format_payment_info(day: int, time: str, message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ"""
    return (
        f"{EMOJI['calendar']} <b>–î–µ–Ω—å:</b> {day} —á–∏—Å–ª–æ\n"
        f"{EMOJI['clock']} <b>–í—Ä–µ–º—è:</b> {time}\n"
        f"{EMOJI['chat']} <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <i>{escape_html(message[:100])}"
        f"{'...' if len(message) > 100 else ''}</i>"
    )

# –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
def format_divider() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é"""
    return f"{'‚îÅ' * 20}\n\n"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('payment_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admin_settings (
            admin_id INTEGER PRIMARY KEY,
            alias TEXT NOT NULL DEFAULT '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            default_message TEXT NOT NULL DEFAULT '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥–∏.',
            show_notifications BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_admin_links (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            admin_id INTEGER NOT NULL,
            payment_day INTEGER NOT NULL,
            payment_time TEXT NOT NULL,
            payment_message TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, admin_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            admin_id INTEGER NOT NULL,
            payment_date DATE NOT NULL,
            confirmed BOOLEAN DEFAULT FALSE,
            amount REAL DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS pending_payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            admin_id INTEGER NOT NULL,
            message_id INTEGER NOT NULL,
            due_date TIMESTAMP NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS active_chats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            admin_id INTEGER NOT NULL,
            started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, admin_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS message_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            from_user_id INTEGER NOT NULL,
            to_user_id INTEGER NOT NULL,
            message_type TEXT NOT NULL,
            message_content TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect('payment_bot.db')

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_admin_for_user(user_id: int) -> Optional[int]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT admin_id FROM user_admin_links WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def get_users_for_admin(admin_id: int) -> List[tuple]:
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT user_id, payment_day, payment_time, payment_message 
        FROM user_admin_links WHERE admin_id = ?
        ORDER BY payment_day, payment_time
    ''', (admin_id,))
    result = cursor.fetchall()
    conn.close()
    return result

def add_user_to_admin(user_id: int, admin_id: int, day: int, time: str, message: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO user_admin_links 
        (user_id, admin_id, payment_day, payment_time, payment_message)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, admin_id, day, time, message))
    conn.commit()
    conn.close()

def remove_user_from_admin(user_id: int, admin_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM user_admin_links WHERE user_id = ? AND admin_id = ?', 
                   (user_id, admin_id))
    conn.commit()
    conn.close()

def get_payment_stats(admin_id: int) -> Dict:
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('''
        SELECT COUNT(*) FROM payments WHERE admin_id = ? AND confirmed = TRUE
    ''', (admin_id,))
    confirmed_payments = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT COUNT(*) FROM payments WHERE admin_id = ? AND confirmed = FALSE
    ''', (admin_id,))
    pending_payments = cursor.fetchone()[0]
    
    cursor.execute('''
        SELECT COUNT(*) FROM user_admin_links WHERE admin_id = ?
    ''', (admin_id,))
    total_users = cursor.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_month = datetime.now().replace(day=1)
    cursor.execute('''
        SELECT COUNT(*) FROM payments 
        WHERE admin_id = ? AND confirmed = TRUE AND payment_date >= ?
    ''', (admin_id, current_month))
    month_payments = cursor.fetchone()[0]
    
    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    cursor.execute('''
        SELECT COUNT(*) FROM pending_payments 
        WHERE admin_id = ? AND due_date <= ?
    ''', (admin_id, datetime.now()))
    overdue_payments = cursor.fetchone()[0]
    
    # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü
    cursor.execute('''
        SELECT SUM(amount) FROM payments 
        WHERE admin_id = ? AND confirmed = TRUE AND payment_date >= ?
    ''', (admin_id, current_month))
    month_amount = cursor.fetchone()[0] or 0
    
    conn.close()
    
    return {
        'confirmed': confirmed_payments,
        'pending': pending_payments,
        'total_users': total_users,
        'month_payments': month_payments,
        'overdue': overdue_payments,
        'month_amount': month_amount
    }

def get_admin_settings(admin_id: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT alias, default_message, show_notifications FROM admin_settings WHERE admin_id = ?', (admin_id,))
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return result
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        create_admin_settings(admin_id)
        return ('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥–∏.', True)

def create_admin_settings(admin_id: int):
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO admin_settings (admin_id, alias, default_message, show_notifications)
        VALUES (?, ?, ?, ?)
    ''', (admin_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥–∏.', True))
    conn.commit()
    conn.close()

def update_admin_alias(admin_id: int, alias: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –∞–¥–º–∏–Ω–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE admin_settings SET alias = ? WHERE admin_id = ?
    ''', (alias, admin_id))
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO admin_settings (admin_id, alias) VALUES (?, ?)
        ''', (admin_id, alias))
    conn.commit()
    conn.close()

def update_admin_default_message(admin_id: int, message: str):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE admin_settings SET default_message = ? WHERE admin_id = ?
    ''', (message, admin_id))
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO admin_settings (admin_id, default_message) VALUES (?, ?)
        ''', (admin_id, message))
    conn.commit()
    conn.close()

def start_chat_session(user_id: int, admin_id: int):
    """–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO active_chats (user_id, admin_id)
        VALUES (?, ?)
    ''', (user_id, admin_id))
    conn.commit()
    conn.close()

def end_chat_session(user_id: int, admin_id: int):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM active_chats WHERE user_id = ? AND admin_id = ?
    ''', (user_id, admin_id))
    conn.commit()
    conn.close()

def get_active_chats_for_admin(admin_id: int) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM active_chats WHERE admin_id = ?', (admin_id,))
    result = [row[0] for row in cursor.fetchall()]
    conn.close()
    return result

def is_chat_active(user_id: int, admin_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —á–∞—Ç"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM active_chats WHERE user_id = ? AND admin_id = ?', (user_id, admin_id))
    result = cursor.fetchone()[0] > 0
    conn.close()
    return result

def add_message_to_history(from_user_id: int, to_user_id: int, message_type: str, content: str = None):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO message_history (from_user_id, to_user_id, message_type, message_content)
        VALUES (?, ?, ?, ?)
    ''', (from_user_id, to_user_id, message_type, content))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = message.from_user.username
    
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
    await bot.send_chat_action(user_id, "typing")
    
    if is_admin(user_id):
        await state.set_state(UserStates.user_mode)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
        keyboard = get_mixed_keyboard(True)
        
        text = (
            f"{EMOJI['rocket']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏!</b>\n\n"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"{EMOJI['admin']} <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
            f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π."
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        admin_id = get_admin_for_user(user_id)
        keyboard = get_user_keyboard()
        
        if admin_id:
            admin_alias, _, _ = get_admin_settings(admin_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞—Ç–µ–∂–∞
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT payment_day, payment_time FROM user_admin_links 
                WHERE user_id = ? AND admin_id = ?
            ''', (user_id, admin_id))
            payment_info = cursor.fetchone()
            conn.close()
            
            text = (
                f"{EMOJI['rocket']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏!</b>\n\n"
                f"{format_user_info(user_id, user_name, username)}\n\n"
                f"{EMOJI['success']} <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                f"{EMOJI['admin']} <b>–í–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {escape_html(admin_alias)}\n"
            )
            
            if payment_info:
                day, time = payment_info
                text += (
                    f"\n{EMOJI['bell']} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:</b>\n"
                    f"‚Ä¢ –ö–∞–∂–¥–æ–µ <b>{day} —á–∏—Å–ª–æ</b> –º–µ—Å—è—Ü–∞\n"
                    f"‚Ä¢ –í <b>{time}</b> –ø–æ –≤–∞—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏\n"
                )
            
            await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
        else:
            text = (
                f"{EMOJI['rocket']} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏!</b>\n\n"
                f"{format_user_info(user_id, user_name, username)}\n\n"
                f"{EMOJI['info']} <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
                f"{EMOJI['loading']} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ.\n"
                f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
            )
            
            await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    callback_data=f"add_new_user_{user_id}"
                )]
            ])
            
            admin_text = (
                f"{EMOJI['bell']} <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ!</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_id, user_name, username)}\n\n"
                f"{EMOJI['info']} –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ–±–µ."
            )
            
            for admin_id in ADMINS:
                try:
                    _, _, show_notifications = get_admin_settings(admin_id)
                    if show_notifications:
                        await bot.send_message(
                            admin_id,
                            admin_text,
                            reply_markup=admin_keyboard,
                            parse_mode='HTML'
                        )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á–∞—Ç–∞
@dp.message(lambda message: message.text and message.text.startswith('/chat_') and is_admin(message.from_user.id))
async def quick_chat_command(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.split('_')[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω
        if not is_chat_active(user_id, message.from_user.id):
            await message.answer(f"{EMOJI['error']} –ß–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
            return
        
        await state.set_state(AdminStates.chatting_with_user)
        await state.update_data(chat_user_id=user_id)
        
        try:
            user_info = await bot.get_chat(user_id)
            user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
        except:
            user_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            username = None
        
        keyboard = get_back_keyboard()
        
        text = (
            f"{EMOJI['chat']} <b>–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"{EMOJI['info']} –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '{EMOJI['back']} –ù–∞–∑–∞–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞."
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        admin_alias, _, _ = get_admin_settings(message.from_user.id)
        await bot.send_message(
            user_id,
            f"{EMOJI['admin']} <b>{escape_html(admin_alias)}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É",
            parse_mode='HTML'
        )
        
    except (ValueError, IndexError):
        await message.answer(f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /chat_USER_ID")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == f"{EMOJI['settings']} –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_chat_action(message.chat.id, "typing")
    await state.set_state(UserStates.admin_mode)
    keyboard = get_admin_keyboard()
    
    stats = get_payment_stats(message.from_user.id)
    
    text = (
        f"{EMOJI['settings']} <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        f"{format_divider()}"
        f"{EMOJI['stats']} <b>–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –º–µ—Å—è—Ü: <b>{stats['month_payments']}</b>\n"
        f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{stats['pending']}</b>\n"
    )
    
    if stats['overdue'] > 0:
        text += f"{format_divider()}"
        text += f"‚Ä¢ {EMOJI['alert']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{stats['overdue']}</b>\n"
    
    text += f"{format_divider()}"
    text += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:"
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['stats']} –ú–æ–π —Å—Ç–∞—Ç—É—Å")
async def status_button(message: Message):
    user_id = message.from_user.id
    admin_id = get_admin_for_user(user_id)
    
    await bot.send_chat_action(message.chat.id, "typing")
    
    if is_admin(user_id):
        # –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
        users = get_users_for_admin(user_id)
        stats = get_payment_stats(user_id)
        alias, default_message, show_notifications = get_admin_settings(user_id)
        
        text = f"{EMOJI['admin']} <b>–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n"
        text += format_divider()
        
        text += f"{EMOJI['user']} <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        text += f"‚Ä¢ –ü—Å–µ–≤–¥–æ–Ω–∏–º: <b>{escape_html(alias)}</b>\n"
        text += f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{'–í–∫–ª—é—á–µ–Ω—ã' if show_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}</b>\n\n"
        
        text += f"{EMOJI['stats']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: <b>{stats['confirmed']}</b>\n"
        text += f"‚Ä¢ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: <b>{stats['month_payments']}</b>\n"
        
        if stats['month_amount'] > 0:
            text += f"‚Ä¢ –°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{stats['month_amount']:.2f} ‚ÇΩ</b>\n"
        
        if stats['pending'] > 0:
            text += f"{format_divider()}"
            text += f"\n{EMOJI['loading']} –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{stats['pending']}</b>\n"
        
        if stats['overdue'] > 0:
            text += f"{format_divider()}"
            text += f"{EMOJI['alert']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{stats['overdue']}</b>\n"
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if stats['confirmed'] + stats['pending'] > 0:
            success_rate = (stats['confirmed'] / (stats['confirmed'] + stats['pending']) * 100)
            text += f"{format_divider()}"
            text += f"{EMOJI['success']} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π: <b>{success_rate:.1f}%</b>"
        
    else:
        # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if admin_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT payment_day, payment_time, payment_message 
                FROM user_admin_links WHERE user_id = ? AND admin_id = ?
            ''', (user_id, admin_id))
            result = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT COUNT(*) FROM payments 
                WHERE user_id = ? AND admin_id = ? AND confirmed = TRUE
            ''', (user_id, admin_id))
            confirmed_count = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM payments 
                WHERE user_id = ? AND admin_id = ? AND confirmed = FALSE
            ''', (user_id, admin_id))
            pending_count = cursor.fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
            cursor.execute('''
                SELECT payment_date FROM payments 
                WHERE user_id = ? AND admin_id = ? AND confirmed = TRUE
                ORDER BY payment_date DESC LIMIT 1
            ''', (user_id, admin_id))
            last_payment = cursor.fetchone()
            
            conn.close()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º –∞–¥–º–∏–Ω–∞
            admin_alias, _, _ = get_admin_settings(admin_id)
            
            if result:
                day, time, msg = result
                
                text = f"{EMOJI['user']} <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n"
                text += format_divider()
                
                text += f"{EMOJI['success']} <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
                text += f"{EMOJI['admin']} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{escape_html(admin_alias)}</b>\n\n"
                
                text += f"{EMOJI['bell']} <b>–ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n"
                text += f"‚Ä¢ –î–µ–Ω—å: <b>{day} —á–∏—Å–ª–æ</b> –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\n"
                text += f"‚Ä¢ –í—Ä–µ–º—è: <b>{time}</b>\n\n"
                
                text += f"{EMOJI['money']} <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n"
                text += f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: <b>{confirmed_count}</b>\n"
                
                if pending_count > 0:
                    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: <b>{pending_count}</b>\n"
                
                if last_payment:
                    last_date = datetime.strptime(last_payment[0], '%Y-%m-%d')
                    days_ago = (datetime.now() - last_date).days
                    text += f"{format_divider()}"
                    text += f"{EMOJI['calendar']} –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: <b>{days_ago} –¥–Ω. –Ω–∞–∑–∞–¥</b>\n\n"
                
                # –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                next_reminder = calculate_next_reminder(day, time)
                if next_reminder:
                    text += f"{format_divider()}"
                    text += f"{EMOJI['rocket']} <b>–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {format_date(next_reminder)}\n\n"
                
                text += f"{format_divider()}"
                text += f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞."
            else:
                text = f"{EMOJI['error']} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        else:
            text = (
                f"{EMOJI['user']} <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n"
                f"{format_divider()}"
                f"{EMOJI['warning']} <b>–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
                f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
                f"<code>{user_id}</code>"
            )
    
    await message.answer(text, parse_mode='HTML')

def calculate_next_reminder(day: int, time_str: str) -> Optional[datetime]:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        now = datetime.now()
        hour, minute = map(int, time_str.split(':'))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        try:
            next_date = now.replace(day=day, hour=hour, minute=minute, second=0, microsecond=0)
        except ValueError:
            # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            import calendar
            last_day = calendar.monthrange(now.year, now.month)[1]
            next_date = now.replace(day=min(day, last_day), hour=hour, minute=minute, second=0, microsecond=0)
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if next_date <= now:
            if now.month == 12:
                next_date = next_date.replace(year=now.year + 1, month=1)
            else:
                next_date = next_date.replace(month=now.month + 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            try:
                next_date = next_date.replace(day=day)
            except ValueError:
                import calendar
                last_day = calendar.monthrange(next_date.year, next_date.month)[1]
                next_date = next_date.replace(day=min(day, last_day))
        
        return next_date
    except:
        return None

@dp.message(F.text == f"{EMOJI['chat']} –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º")
async def chat_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if is_admin(user_id):
        await message.answer(f"{EMOJI['admin']} –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    
    admin_id = get_admin_for_user(user_id)
    
    if not admin_id:
        await message.answer(
            f"{EMOJI['error']} –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É:\n"
            f"<code>{user_id}</code>",
            parse_mode='HTML'
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
    start_chat_session(user_id, admin_id)
    
    await state.set_state(UserStates.chatting_with_admin)
    await state.update_data(admin_id=admin_id)
    
    keyboard = get_back_keyboard()
    admin_alias, _, _ = get_admin_settings(admin_id)
    
    text = (
        f"{EMOJI['chat']} <b>–ß–∞—Ç —Å {escape_html(admin_alias)}</b>\n"
        f"{format_divider()}"
        f"{EMOJI['success']} –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –∏—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '{EMOJI['back']} –ù–∞–∑–∞–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
        
        await bot.send_message(
            admin_id,
            f"{EMOJI['bell']} <b>–ù–æ–≤—ã–π —á–∞—Ç!</b>\n\n"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"{EMOJI['chat']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"‚Ä¢ –ö–æ–º–∞–Ω–¥—É /chat_{user_id}\n"
            f"‚Ä¢ –ò–ª–∏ –∫–Ω–æ–ø–∫—É '{EMOJI['chat']} –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã'",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

@dp.message(F.text == f"{EMOJI['back']} –ù–∞–∑–∞–¥")
async def back_button(message: Message, state: FSMContext):
    current_state = await state.get_state()
    user_id = message.from_user.id
    
    if current_state == UserStates.chatting_with_admin.state:
        data = await state.get_data()
        admin_id = data.get('admin_id')
        
        if admin_id:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
            end_chat_session(user_id, admin_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            try:
                user_info = await bot.get_chat(user_id)
                user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                await bot.send_message(
                    admin_id,
                    f"{EMOJI['info']} {escape_html(user_name)} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç",
                    parse_mode='HTML'
                )
            except:
                pass
        
        await state.clear()
        is_admin_user = is_admin(user_id)
        keyboard = get_mixed_keyboard(is_admin_user) if is_admin_user else get_user_keyboard()
        await message.answer(f"{EMOJI['success']} –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)
    
    elif current_state == AdminStates.chatting_with_user.state:
        data = await state.get_data()
        chat_user_id = data.get('chat_user_id')
        
        if chat_user_id:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_alias, _, _ = get_admin_settings(user_id)
            try:
                await bot.send_message(
                    chat_user_id,
                    f"{EMOJI['info']} {escape_html(admin_alias)} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç",
                    parse_mode='HTML'
                )
            except:
                pass
        
        await state.clear()
        keyboard = get_admin_keyboard()
        await message.answer(f"{EMOJI['success']} –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboard)
    
    else:
        await start_handler(message, state)

@dp.message(F.text == f"{EMOJI['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞")
async def admin_settings_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    alias, default_message, show_notifications = get_admin_settings(message.from_user.id)
    
    text = (
        f"{EMOJI['settings']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        f"{format_divider()}"
        f"{EMOJI['user']} <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {escape_html(alias)}\n"
        f"{EMOJI['bell']} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if show_notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"{EMOJI['chat']} <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n"
        f"<i>{escape_html(default_message)}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{EMOJI['user']} –ò–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="change_alias")],
        [InlineKeyboardButton(text=f"{EMOJI['chat']} –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="change_default_message")],
        [InlineKeyboardButton(
            text=f"{EMOJI['bell']} {'–í—ã–∫–ª—é—á–∏—Ç—å' if show_notifications else '–í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            callback_data="toggle_notifications"
        )]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['chat']} –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã")
async def active_chats_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    active_chats = get_active_chats_for_admin(message.from_user.id)
    
    if not active_chats:
        await message.answer(f"{EMOJI['info']} –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return
    
    text = f"{EMOJI['chat']} <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:</b>\n"
    text += format_divider()
    
    buttons = []
    for i, user_id in enumerate(active_chats, 1):
        try:
            user_info = await bot.get_chat(user_id)
            user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
            
            text += f"{i}. {format_user_info(user_id, user_name, username)}\n\n"
            
            buttons.append([InlineKeyboardButton(
                text=f"{EMOJI['chat']} {user_name}",
                callback_data=f"start_chat_{user_id}"
            )])
        except:
            text += f"{i}. {EMOJI['user']} –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ID: <code>{user_id}</code>)\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['add']} –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def add_user_button(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await state.set_state(AdminStates.waiting_user_id)
    keyboard = get_cancel_keyboard()
    
    text = (
        f"{EMOJI['add']} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"{format_divider()}"
        f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
        f"{EMOJI['info']} <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É /start"
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def list_users_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_chat_action(message.chat.id, "typing")
    users = get_users_for_admin(message.from_user.id)
    
    if not users:
        await message.answer(f"{EMOJI['info']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    text = f"{EMOJI['list']} <b>–í–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n"
    text += format_divider()
    
    for i, (user_id, day, time, msg) in enumerate(users, 1):
        try:
            user_info = await bot.get_chat(user_id)
            username = user_info.username or "–Ω–µ—Ç"
            full_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        except:
            username = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            full_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        text += f"<b>{i}. {escape_html(full_name)}</b>\n"
        text += f"   @{escape_html(username)} | ID: <code>{user_id}</code>\n"
        text += f"   {EMOJI['calendar']} {day} —á–∏—Å–ª–æ, {EMOJI['clock']} {time}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(text) > 3500:
            await message.answer(text, parse_mode='HTML')
            text = ""
    
    if text:
        await message.answer(text, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç")
async def payment_stats_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_chat_action(message.chat.id, "typing")
    stats = get_payment_stats(message.from_user.id)
    
    text = f"{EMOJI['stats']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç</b>\n"
    text += format_divider()
    
    text += f"{EMOJI['user']} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{stats['total_users']}</b>\n\n"
    
    text += f"{EMOJI['money']} <b>–ü–ª–∞—Ç–µ–∂–∏:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: <b>{stats['confirmed']}</b>\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{stats['pending']}</b>\n"
    text += f"‚Ä¢ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: <b>{stats['month_payments']}</b>\n"
    
    if stats['month_amount'] > 0:
        text += f"‚Ä¢ –°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{stats['month_amount']:.2f} ‚ÇΩ</b>\n"
    
    if stats['overdue'] > 0:
        text += f"{format_divider()}"
        text += f"\n{EMOJI['alert']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{stats['overdue']}</b>\n"
    
    text += f"{format_divider()}"
    text += f"\n{EMOJI['stats']} <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n"
    
    if stats['total_users'] > 0:
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        month_rate = (stats['month_payments'] / stats['total_users'] * 100)
        text += f"{format_divider()}"
        text += f"‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <b>{month_rate:.1f}%</b>\n"
    
    if stats['confirmed'] + stats['pending'] > 0:
        success_rate = (stats['confirmed'] / (stats['confirmed'] + stats['pending']) * 100)
        text += f"{format_divider()}"
        text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π: <b>{success_rate:.1f}%</b>\n"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['remove']} –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def remove_user_button(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    users = get_users_for_admin(message.from_user.id)
    
    if not users:
        await message.answer(f"{EMOJI['info']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    await state.set_state(AdminStates.waiting_unlink_user)
    
    text = f"{EMOJI['remove']} <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
    text += format_divider()
    
    for user_id, _, _, _ in users:
        try:
            user_info = await bot.get_chat(user_id)
            name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            text += f"‚Ä¢ <code>{user_id}</code> - {escape_html(name)}\n"
        except:
            text += f"‚Ä¢ <code>{user_id}</code> - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    text += f"{format_divider()}"
    text += f"\n{EMOJI['info']} –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    keyboard = get_cancel_keyboard()
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['search']} –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏–µ")
async def unpaid_users_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_chat_action(message.chat.id, "typing")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    current_month = datetime.now().replace(day=1)
    cursor.execute('''
        SELECT DISTINCT u.user_id 
        FROM user_admin_links u
        LEFT JOIN payments p ON u.user_id = p.user_id 
                             AND u.admin_id = p.admin_id 
                             AND p.payment_date >= ?
                             AND p.confirmed = TRUE
        WHERE u.admin_id = ? AND p.user_id IS NULL
        ORDER BY u.user_id
    ''', (current_month, message.from_user.id))
    
    unpaid_users = cursor.fetchall()
    conn.close()
    
    if not unpaid_users:
        await message.answer(f"{EMOJI['success']} –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ!")
        return
    
    text = f"{EMOJI['search']} <b>–ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –≤ {datetime.now().strftime('%B %Y')}:</b>\n"
    text += format_divider()
    
    for i, (user_id,) in enumerate(unpaid_users, 1):
        try:
            user_info = await bot.get_chat(user_id)
            name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
            text += f"{i}. {format_user_info(user_id, name, username)}\n\n"
        except:
            text += f"{i}. {EMOJI['user']} –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ID: <code>{user_id}</code>)\n\n"
    
    text += f"{format_divider()}"
    text += f"{EMOJI['info']} –í—Å–µ–≥–æ: <b>{len(unpaid_users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['alert']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ")
async def overdue_payments_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await bot.send_chat_action(message.chat.id, "typing")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT DISTINCT user_id, due_date
        FROM pending_payments 
        WHERE admin_id = ? AND due_date <= ?
        ORDER BY due_date
    ''', (message.from_user.id, datetime.now()))
    
    overdue = cursor.fetchall()
    conn.close()
    
    if not overdue:
        await message.answer(f"{EMOJI['success']} –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π!")
        return
    
    text = f"{EMOJI['alert']} <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n"
    text += format_divider()
    
    for user_id, due_date in overdue:
        try:
            user_info = await bot.get_chat(user_id)
            name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
        except:
            name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            username = None
        
        due_dt = datetime.fromisoformat(due_date.replace('Z', '+00:00') if 'Z' in due_date else due_date)
        days_overdue = (datetime.now() - due_dt).days
        
        text += f"{format_user_info(user_id, name, username)}\n"
        text += f"{EMOJI['clock']} –ü—Ä–æ—Å—Ä–æ—á–∫–∞: <b>{days_overdue} –¥–Ω.</b>\n\n"
    
    text += f"{format_divider()}"
    text += f"{EMOJI['warning']} –í—Å–µ–≥–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: <b>{len(overdue)}</b>"
    
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['check']} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—ã")
async def confirm_payments_button(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    cursor.execute('''
        SELECT user_id, payment_date 
        FROM payments 
        WHERE admin_id = ? AND confirmed = FALSE
        ORDER BY payment_date DESC
        LIMIT 10
    ''', (message.from_user.id,))
    
    pending = cursor.fetchall()
    
    if not pending:
        await message.answer(f"{EMOJI['success']} –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        return
    
    text = f"{EMOJI['check']} <b>–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n"
    text += format_divider()
    
    for user_id, payment_date in pending:
        try:
            user_info = await bot.get_chat(user_id)
            name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
        except:
            name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            username = None
        
        text += f"{format_user_info(user_id, name, username)}\n"
        text += f"{EMOJI['calendar']} –î–∞—Ç–∞: <b>{payment_date}</b>\n\n"
    
    text += f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    
    conn.close()
    await message.answer(text, parse_mode='HTML')

@dp.message(F.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞")
async def cancel_button(message: Message, state: FSMContext):
    await state.clear()
    
    if is_admin(message.from_user.id):
        keyboard = get_admin_keyboard()
        await message.answer(f"{EMOJI['info']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)
    else:
        keyboard = get_user_keyboard()
        await message.answer(f"{EMOJI['info']} –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data == "change_alias")
async def change_alias_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_alias)
    await callback.message.edit_text(
        f"{EMOJI['user']} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.\n\n"
        f"{EMOJI['info']} –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode='HTML'
    )

@dp.callback_query(F.data == "change_default_message")
async def change_default_message_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_default_message)
    await callback.message.edit_text(
        f"{EMOJI['chat']} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.\n\n"
        f"{EMOJI['info']} –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode='HTML'
    )

@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    _, _, show_notifications = get_admin_settings(callback.from_user.id)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    new_status = not show_notifications
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE admin_settings SET show_notifications = ? WHERE admin_id = ?
    ''', (new_status, callback.from_user.id))
    conn.commit()
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    alias, default_message, _ = get_admin_settings(callback.from_user.id)
    
    text = (
        f"{EMOJI['settings']} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        f"{format_divider()}"
        f"{EMOJI['user']} <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º:</b> {escape_html(alias)}\n"
        f"{EMOJI['bell']} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if new_status else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"{EMOJI['chat']} <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n"
        f"<i>{escape_html(default_message)}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{EMOJI['user']} –ò–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="change_alias")],
        [InlineKeyboardButton(text=f"{EMOJI['chat']} –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="change_default_message")],
        [InlineKeyboardButton(
            text=f"{EMOJI['bell']} {'–í—ã–∫–ª—é—á–∏—Ç—å' if new_status else '–í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            callback_data="toggle_notifications"
        )]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer(
        f"{EMOJI['success']} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!",
        show_alert=True
    )

@dp.callback_query(F.data.startswith("start_chat_"))
async def start_chat_with_user_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if not is_chat_active(user_id, callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –ß–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
        return
    
    await state.set_state(AdminStates.chatting_with_user)
    await state.update_data(chat_user_id=user_id)
    
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
    except:
        user_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        username = None
    
    await callback.message.edit_text(
        f"{EMOJI['chat']} <b>–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</b>\n\n"
        f"{format_user_info(user_id, user_name, username)}\n\n"
        f"{EMOJI['info']} –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        parse_mode='HTML'
    )
    
    keyboard = get_back_keyboard()
    await bot.send_message(
        callback.from_user.id,
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_alias, _, _ = get_admin_settings(callback.from_user.id)
    await bot.send_message(
        user_id,
        f"{EMOJI['admin']} <b>{escape_html(admin_alias)}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(StateFilter(AdminStates.waiting_alias))
async def process_alias_change(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    new_alias = message.text.strip()
    if len(new_alias) > 50:
        await message.answer(f"{EMOJI['error']} –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(new_alias) < 2:
        await message.answer(f"{EMOJI['error']} –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    update_admin_alias(message.from_user.id, new_alias)
    await state.clear()
    
    keyboard = get_admin_keyboard()
    await message.answer(
        f"{EMOJI['success']} <b>–ü—Å–µ–≤–¥–æ–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
        f"–ù–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º: <b>{escape_html(new_alias)}</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message(StateFilter(AdminStates.waiting_default_message))
async def process_default_message_change(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    new_message = message.text.strip()
    if len(new_message) > 500:
        await message.answer(f"{EMOJI['error']} –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(new_message) < 10:
        await message.answer(f"{EMOJI['error']} –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    update_admin_default_message(message.from_user.id, new_message)
    await state.clear()
    
    keyboard = get_admin_keyboard()
    await message.answer(
        f"{EMOJI['success']} <b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
        f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<i>{escape_html(new_message)}</i>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(StateFilter(AdminStates.waiting_user_id))
async def process_user_id(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–º —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer(f"{EMOJI['error']} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        existing_admin = get_admin_for_user(user_id)
        if existing_admin:
            if existing_admin == message.from_user.id:
                await message.answer(f"{EMOJI['error']} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º!")
            else:
                await message.answer(f"{EMOJI['error']} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_info = await bot.get_chat(user_id)
            user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
        except:
            await message.answer(
                f"{EMOJI['error']} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"{EMOJI['info']} –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.",
                parse_mode='HTML'
            )
            return
        
        await state.update_data(user_id=user_id, user_name=user_name)
        await state.set_state(AdminStates.waiting_day)
        
        keyboard = get_cancel_keyboard()
        await message.answer(
            f"{EMOJI['success']} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n\n"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"{EMOJI['calendar']} –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (1-31):",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except ValueError:
        await message.answer(f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(StateFilter(AdminStates.waiting_day))
async def process_day(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    try:
        day = int(message.text.strip())
        if not 1 <= day <= 31:
            await message.answer(f"{EMOJI['error']} –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31.")
            return
        
        await state.update_data(day=day)
        await state.set_state(AdminStates.waiting_time)
        
        keyboard = get_cancel_keyboard()
        await message.answer(
            f"{EMOJI['success']} –î–µ–Ω—å: <b>{day} —á–∏—Å–ª–æ</b>\n\n"
            f"{EMOJI['clock']} –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00, 14:30, 09:15",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except ValueError:
        await message.answer(f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31.")

@dp.message(StateFilter(AdminStates.waiting_time))
async def process_time(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    time_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_str, "%H:%M")
        await state.update_data(time=time_str)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        _, default_message, _ = get_admin_settings(message.from_user.id)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{EMOJI['chat']} –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                callback_data="enter_custom_msg"
            )],
            [InlineKeyboardButton(
                text=f"{EMOJI['success']} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", 
                callback_data="use_default_msg"
            )]
        ])
        
        data = await state.get_data()
        
        text = (
            f"{EMOJI['success']} –í—Ä–µ–º—è: <b>{time_str}</b>\n\n"
            f"{EMOJI['info']} <b>–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{escape_html(data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'))}</b>\n"
            f"‚Ä¢ –î–µ–Ω—å: <b>{data.get('day')} —á–∏—Å–ª–æ</b>\n"
            f"‚Ä¢ –í—Ä–µ–º—è: <b>{time_str}</b>\n\n"
            f"{EMOJI['chat']} <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
            f"<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n"
            f"<i>{escape_html(default_message)}</i>"
        )
        
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    except ValueError:
        await message.answer(
            f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            f"–ü—Ä–∏–º–µ—Ä—ã: 09:00, 14:30, 23:45"
        )

@dp.message(StateFilter(AdminStates.waiting_message))
async def process_message(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    payment_message = message.text.strip()
    
    if len(payment_message) < 5:
        await message.answer(f"{EMOJI['error']} –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(payment_message) > 500:
        await message.answer(f"{EMOJI['error']} –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    day = data['day']
    time = data['time']
    
    await complete_user_addition(
        message.from_user.id, user_id, day, time, payment_message, state, message
    )

async def complete_user_addition(admin_id: int, user_id: int, day: int, time: str, payment_message: str, state: FSMContext, message: Message):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user_to_admin(user_id, admin_id, day, time, payment_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    hour, minute = map(int, time.split(':'))
    scheduler.add_job(
        send_payment_reminder,
        CronTrigger(day=day, hour=hour, minute=minute),
        args=[user_id, admin_id, payment_message],
        id=f"payment_{user_id}_{admin_id}",
        replace_existing=True
    )
    
    await state.clear()
    
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
    except:
        user_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        username = None
    
    admin_alias, _, _ = get_admin_settings(admin_id)
    
    keyboard = get_admin_keyboard()
    
    text = (
        f"{EMOJI['success']} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
        f"{format_divider()}"
        f"{format_user_info(user_id, user_name, username)}\n\n"
        f"{format_payment_info(day, time, payment_message)}\n\n"
        f"{EMOJI['rocket']} –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        next_reminder = calculate_next_reminder(day, time)
        
        text = (
            f"{EMOJI['bell']} <b>–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!</b>\n"
            f"{format_divider()}"
            f"{format_divider()}"
            f"{EMOJI['admin']} <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {escape_html(admin_alias)}\n"
            f"{EMOJI['calendar']} <b>–î–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {day} —á–∏—Å–ª–æ\n"
            f"{EMOJI['clock']} <b>–í—Ä–µ–º—è:</b> {time}\n\n"
        )
        
        if next_reminder:
            text += f"{EMOJI['rocket']} <b>–ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {format_date(next_reminder)}\n\n"
        
        text += f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞."
        
        await bot.send_message(
            user_id,
            text,
            reply_markup=get_user_keyboard(),
            parse_mode='HTML'
        )
    except:
        await message.answer(
            f"{EMOJI['warning']} –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."
        )

@dp.message(StateFilter(AdminStates.waiting_unlink_user))
async def process_unlink_user(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['cancel']} –û—Ç–º–µ–Ω–∞":
        await cancel_button(message, state)
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É
        users = get_users_for_admin(message.from_user.id)
        user_ids = [u[0] for u in users]
        
        if user_id not in user_ids:
            await message.answer(f"{EMOJI['error']} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º!")
            return
        
        remove_user_from_admin(user_id, message.from_user.id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            scheduler.remove_job(f"payment_{user_id}_{message.from_user.id}")
        except:
            pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if is_chat_active(user_id, message.from_user.id):
            end_chat_session(user_id, message.from_user.id)
        
        await state.clear()
        
        keyboard = get_admin_keyboard()
        await message.answer(
            f"{EMOJI['success']} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                user_id,
                f"{EMOJI['warning']} –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ.\n\n"
                f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                reply_markup=get_user_keyboard()
            )
        except:
            pass
            
    except ValueError:
        await message.answer(f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–¥–º–∏–Ω–æ–º
@dp.message(StateFilter(UserStates.chatting_with_admin))
async def forward_to_admin(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['back']} –ù–∞–∑–∞–¥":
        await back_button(message, state)
        return
    
    data = await state.get_data()
    admin_id = data['admin_id']
    
    user_info = message.from_user
    admin_alias, _, show_notifications = get_admin_settings(admin_id)
    
    if not show_notifications:
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await message.answer(f"{EMOJI['success']} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.text:
            text = (
                f"{EMOJI['chat']} <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} <b>–¢–µ–∫—Å—Ç:</b>\n{escape_html(message.text)}\n\n"
                f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_{user_info.id} –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
            )
            await bot.send_message(admin_id, text, parse_mode='HTML')
            add_message_to_history(user_info.id, admin_id, 'text', message.text)
        
        elif message.photo:
            caption = message.caption or ""
            text = (
                f"{EMOJI['chat']} <b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text
            )
            await bot.send_photo(
                admin_id,
                message.photo[-1].file_id,
                caption=f"{text}\n\n{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(user_info.id, admin_id, 'photo', caption)
        
        elif message.video:
            caption = message.caption or ""
            text = (
                f"{EMOJI['chat']} <b>–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text
            )
            await bot.send_video(
                admin_id,
                message.video.file_id,
                caption=f"{text}\n\n{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(user_info.id, admin_id, 'video', caption)
        
        elif message.document:
            caption = message.caption or ""
            text = (
                f"{EMOJI['chat']} <b>–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text
            )
            await bot.send_document(
                admin_id,
                message.document.file_id,
                caption=f"{text}\n\n{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(user_info.id, admin_id, 'document', message.document.file_name)
        
        elif message.voice:
            text = (
                f"{EMOJI['chat']} <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(message.voice.caption)}" if message.voice.caption else text
            )
            await bot.send_voice(
                admin_id,
                message.voice.file_id,
                caption=text,
                parse_mode='HTML'
            )
            add_message_to_history(user_info.id, admin_id, 'voice', message.voice.caption)
        
        elif message.video_note:
            await bot.send_video_note(admin_id, message.video_note.file_id)
            text = (
                f"{EMOJI['chat']} <b>–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:</b>\n"
                f"{format_user_info(user_info.id, user_info.full_name, user_info.username)}\n\n"
                f"{EMOJI['chat']} –ü–æ–¥–ø–∏—Å—å: {escape_html(message.video_note.caption)}" if message.video_note.caption else text
            )
            await bot.send_message(admin_id, text, parse_mode='HTML')
            add_message_to_history(user_info.id, admin_id, 'video_note', message.video_note.caption)
        
        await message.answer(f"{EMOJI['success']} –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º  
@dp.message(StateFilter(AdminStates.chatting_with_user))
async def forward_to_user(message: Message, state: FSMContext):
    if message.text == f"{EMOJI['back']} –ù–∞–∑–∞–¥":
        await back_button(message, state)
        return
    
    data = await state.get_data()
    user_id = data.get('chat_user_id')
    
    if not user_id:
        await message.answer(f"{EMOJI['error']} –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if not is_chat_active(user_id, message.from_user.id):
        await message.answer(
            f"{EMOJI['error']} –ß–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é."
        )
        await state.clear()
        keyboard = get_admin_keyboard()
        await bot.send_message(
            message.from_user.id,
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=keyboard
        )
        return
    
    admin_alias, _, _ = get_admin_settings(message.from_user.id)
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.text:
            text = f"{EMOJI['admin']} <b>{escape_html(admin_alias)}:</b>\n\n{escape_html(message.text)}\n\n"
            await bot.send_message(user_id, text, parse_mode='HTML')
            add_message_to_history(message.from_user.id, user_id, 'text', message.text)
        
        elif message.photo:
            caption = message.caption or ""
            text = f"{EMOJI['admin']} <b>–§–æ—Ç–æ –æ—Ç {escape_html(admin_alias)}</b>\n\n{escape_html(caption)}\n\n"
            await bot.send_photo(
                user_id,
                message.photo[-1].file_id,
                caption=f"{text}\n\n{escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(message.from_user.id, user_id, 'photo', caption)
        
        elif message.video:
            caption = message.caption or ""
            text = f"{EMOJI['admin']} <b>–í–∏–¥–µ–æ –æ—Ç {escape_html(admin_alias)}</b>\n\n{escape_html(caption)}\n\n"
            await bot.send_video(
                user_id,
                message.video.file_id,
                caption=f"{text}\n\n{escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(message.from_user.id, user_id, 'video', caption)
        
        elif message.document:
            caption = message.caption or ""
            text = f"{EMOJI['admin']} <b>–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç {escape_html(admin_alias)}</b>\n\n{escape_html(caption)}\n\n"
            await bot.send_document(
                user_id,
                message.document.file_id,
                caption=f"{text}\n\n{escape_html(caption)}" if caption else text,
                parse_mode='HTML'
            )
            add_message_to_history(message.from_user.id, user_id, 'document', message.document.file_name)
        
        elif message.voice:
            text = f"{EMOJI['admin']} <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {escape_html(admin_alias)}</b>\n\n{escape_html(message.voice.caption)}\n\n"
            await bot.send_voice(
                user_id,
                message.voice.file_id,
                caption=text,
                parse_mode='HTML'
            )
            add_message_to_history(message.from_user.id, user_id, 'voice', message.voice.caption)
        
        elif message.video_note:
            await bot.send_video_note(user_id, message.video_note.file_id)
            text = f"{EMOJI['admin']} <b>–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {escape_html(admin_alias)}</b>\n\n{escape_html(message.video_note.caption)}\n\n"
            await bot.send_message(user_id, text, parse_mode='HTML')
            add_message_to_history(message.from_user.id, user_id, 'video_note', message.video_note.caption)
        
        await message.answer(f"{EMOJI['success']} –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(
            f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_payment_reminder(user_id: int, admin_id: int, message_text: str):
    keyboard = get_payment_confirmation_keyboard(admin_id)
    admin_alias, _, _ = get_admin_settings(admin_id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω—É
        current_admin = get_admin_for_user(user_id)
        if current_admin != admin_id:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω—É {admin_id}")
            return
        
        text = (
            f"{EMOJI['money']} <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ!</b>\n"
            f"{format_divider()}"
            f"{escape_html(message_text)}\n\n"
            f"{format_divider()}"
            f"{escape_html(message_text)}\n\n"
            f"{EMOJI['admin']} –û—Ç: <b>{escape_html(admin_alias)}</b>\n"
            f"{EMOJI['clock']} –í—Ä–µ–º—è: <b>{format_date(datetime.now())}</b>"
        )
        
        sent_message = await bot.send_message(
            user_id,
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∂–∏–¥–∞—é—â–µ–º –ø–ª–∞—Ç–µ–∂–µ
        conn = get_db_connection()
        cursor = conn.cursor()
        due_date = datetime.now() + timedelta(days=PAYMENT_TIMEOUT_DAYS)
        cursor.execute('''
            INSERT INTO pending_payments (user_id, admin_id, message_id, due_date)
            VALUES (?, ?, ?, ?)
        ''', (user_id, admin_id, sent_message.message_id, due_date))
        conn.commit()
        conn.close()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        scheduler.add_job(
            check_overdue_payment,
            'date',
            run_date=due_date,
            args=[user_id, admin_id],
            id=f"overdue_{user_id}_{admin_id}_{sent_message.message_id}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ
        await bot.send_message(
            admin_id,
            f"{EMOJI['success']} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: <code>{user_id}</code>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                admin_id,
                f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: <code>{user_id}</code>\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.",
                parse_mode='HTML'
            )
        except:
            pass

async def check_overdue_payment(user_id: int, admin_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    cursor.execute('''
        SELECT COUNT(*) FROM pending_payments 
        WHERE user_id = ? AND admin_id = ? AND due_date <= ?
    ''', (user_id, admin_id, datetime.now()))
    
    overdue_count = cursor.fetchone()[0]
    
    if overdue_count > 0:
        try:
            user_info = await bot.get_chat(user_id)
            user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = user_info.username
        except:
            user_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            username = None
        
        _, _, show_notifications = get_admin_settings(admin_id)
        
        if show_notifications:
            await bot.send_message(
                admin_id,
                f"{EMOJI['alert']} <b>–ü–†–û–°–†–û–ß–ö–ê –ü–õ–ê–¢–ï–ñ–ê!</b>\n"
                f"{format_divider()}"
                f"{format_user_info(user_id, user_name, username)}\n\n"
                f"{EMOJI['clock']} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: <b>{PAYMENT_TIMEOUT_DAYS} –¥–Ω.</b>\n\n"
                f"{EMOJI['info']} –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
                parse_mode='HTML'
            )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data.startswith("paid_"))
async def payment_confirmation(callback: CallbackQuery):
    admin_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT COUNT(*) FROM payments 
        WHERE user_id = ? AND admin_id = ? 
        AND DATE(payment_date) = DATE('now') 
        AND confirmed = FALSE
    ''', (user_id, admin_id))
    
    existing_payment = cursor.fetchone()[0]
    
    if existing_payment > 0:
        await callback.answer(
            f"{EMOJI['warning']} –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            show_alert=True
        )
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ (–Ω–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ)
    cursor.execute('''
        INSERT INTO payments (user_id, admin_id, payment_date, confirmed)
        VALUES (?, ?, DATE('now'), FALSE)
    ''', (user_id, admin_id))
    conn.commit()
    conn.close()
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await callback.message.edit_reply_markup()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_text = callback.message.text + f"\n\n{EMOJI['success']} <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    await callback.message.edit_text(new_text, parse_mode='HTML')
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = get_admin_payment_confirmation_keyboard(user_id)
    
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
    except:
        user_name = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        username = None
    
    admin_alias, _, show_notifications = get_admin_settings(admin_id)
    
    if show_notifications:
        await bot.send_message(
            admin_id,
            f"{EMOJI['money']} <b>–ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!</b>\n"
            f"{format_divider()}"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"{EMOJI['calendar']} –î–∞—Ç–∞: <b>{datetime.now().strftime('%d.%m.%Y')}</b>\n"
            f"{EMOJI['clock']} –í—Ä–µ–º—è: <b>{datetime.now().strftime('%H:%M')}</b>\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    await callback.answer(f"{EMOJI['success']} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE payments SET confirmed = TRUE 
        WHERE user_id = ? AND admin_id = ? AND confirmed = FALSE
        AND DATE(payment_date) = DATE('now')
    ''', (user_id, callback.from_user.id))
    
    updated_rows = cursor.rowcount
    
    if updated_rows == 0:
        await callback.answer(
            f"{EMOJI['warning']} –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            show_alert=True
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    cursor.execute('''
        DELETE FROM pending_payments 
        WHERE user_id = ? AND admin_id = ?
    ''', (user_id, callback.from_user.id))
    
    conn.commit()
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        callback.message.text + f"\n\n{EMOJI['success']} <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n{format_date(datetime.now())}",
        parse_mode='HTML'
    )
    
    admin_alias, _, _ = get_admin_settings(callback.from_user.id)
    
    try:
        await bot.send_message(
            user_id,
            f"{EMOJI['success']} <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"{EMOJI['admin']} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{escape_html(admin_alias)}</b>\n"
            f"{EMOJI['calendar']} –î–∞—Ç–∞: <b>{datetime.now().strftime('%d.%m.%Y %H:%M')}</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É!",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer(f"{EMOJI['success']} –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_payment(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[1])
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM payments 
        WHERE user_id = ? AND admin_id = ? AND confirmed = FALSE
        AND DATE(payment_date) = DATE('now')
    ''', (user_id, callback.from_user.id))
    
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    
    if deleted_rows == 0:
        await callback.answer(
            f"{EMOJI['warning']} –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            show_alert=True
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        callback.message.text + f"\n\n{EMOJI['error']} <b>–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù</b>\n{format_date(datetime.now())}",
        parse_mode='HTML'
    )
    
    admin_alias, _, _ = get_admin_settings(callback.from_user.id)
    
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{EMOJI['chat']} –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                callback_data=f"contact_admin_{callback.from_user.id}"
            )]
        ])
        
        await bot.send_message(
            user_id,
            f"{EMOJI['error']} <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"{EMOJI['admin']} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <b>{escape_html(admin_alias)}</b>\n"
            f"{EMOJI['calendar']} –î–∞—Ç–∞: <b>{datetime.now().strftime('%d.%m.%Y %H:%M')}</b>\n\n"
            f"{EMOJI['info']} –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer(f"{EMOJI['info']} –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º –∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(F.data.startswith("contact_admin_"))
async def contact_admin_from_rejection(callback: CallbackQuery, state: FSMContext):
    admin_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É
    current_admin = get_admin_for_user(user_id)
    if current_admin != admin_id:
        await callback.answer(
            f"{EMOJI['error']} –í—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            show_alert=True
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç
    start_chat_session(user_id, admin_id)
    await state.set_state(UserStates.chatting_with_admin)
    await state.update_data(admin_id=admin_id)
    
    keyboard = get_back_keyboard()
    admin_alias, _, _ = get_admin_settings(admin_id)
    
    await callback.message.answer(
        f"{EMOJI['chat']} <b>–ß–∞—Ç —Å {escape_html(admin_alias)}</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –ø–ª–∞—Ç–µ–∂—É.",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
        
        await bot.send_message(
            admin_id,
            f"{EMOJI['bell']} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            f"{format_user_info(user_id, user_name, username)}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_{user_id} –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
            parse_mode='HTML'
        )
    except:
        pass
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query(F.data == "use_default_msg")
async def use_default_message_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    day = data['day']
    time = data['time']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    _, default_message, _ = get_admin_settings(callback.from_user.id)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await complete_user_addition(
        callback.from_user.id,
        user_id,
        day,
        time,
        default_message,
        state,
        callback.message
    )

@dp.callback_query(F.data == "enter_custom_msg")
async def enter_custom_message_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await state.set_state(AdminStates.waiting_message)
    keyboard = get_cancel_keyboard()
    
    await callback.message.edit_text(
        f"{EMOJI['chat']} <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
        f"–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.\n\n"
        f"{EMOJI['info']} –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤",
        parse_mode='HTML'
    )
    
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
        reply_markup=keyboard
    )

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description=f"{EMOJI['rocket']} –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        try:
            active_chats = get_active_chats_for_admin(admin_id)
            if active_chats:
                admin_commands = commands.copy()
                for user_id in active_chats[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –∫–æ–º–∞–Ω–¥
                    try:
                        user_info = await bot.get_chat(user_id)
                        user_name = user_info.full_name or "ID " + str(user_id)
                        user_name = user_name[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        admin_commands.append(
                            BotCommand(
                                command=f"chat_{user_id}",
                                description=f"{EMOJI['chat']} –ß–∞—Ç —Å {user_name}"
                            )
                        )
                    except:
                        pass
                
                await bot.set_my_commands(admin_commands, scope={'type': 'chat', 'chat_id': admin_id})
        except:
            pass
    
    await bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if current_state:
        return
    
    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if message.text and message.text.startswith('/'):
        await message.answer(
            f"{EMOJI['error']} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_id = message.from_user.id
    
    if is_admin(user_id):
        keyboard = get_mixed_keyboard(True)
        await message.answer(
            f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=keyboard
        )
    else:
        keyboard = get_user_keyboard()
        await message.answer(
            f"{EMOJI['info']} –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=keyboard
        )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.handlers.RotatingFileHandler(
                'bot.log',
                maxBytes=10*1024*1024,  # 10 MB
                backupCount=5,
                encoding='utf-8'
            ),
            logging.StreamHandler()
        ]
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        create_admin_settings(admin_id)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, admin_id, payment_day, payment_time, payment_message FROM user_admin_links')
    links = cursor.fetchall()
    conn.close()
    
    for user_id, admin_id, day, time, message in links:
        try:
            hour, minute = map(int, time.split(':'))
            scheduler.add_job(
                send_payment_reminder,
                CronTrigger(day=day, hour=hour, minute=minute),
                args=[user_id, admin_id, message],
                id=f"payment_{user_id}_{admin_id}",
                replace_existing=True
            )
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {day} —á–∏—Å–ª–æ –≤ {time}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await setup_bot_commands()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"{EMOJI['rocket']} <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"{EMOJI['success']} –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n"
                f"{EMOJI['info']} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                parse_mode='HTML',
                disable_notification=True
            )
        except:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith("add_new_user_"))
async def add_new_user_callback(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer(f"{EMOJI['error']} –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    existing_admin = get_admin_for_user(user_id)
    if existing_admin:
        if existing_admin == callback.from_user.id:
            await callback.answer(f"{EMOJI['error']} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º!", show_alert=True)
        else:
            await callback.answer(f"{EMOJI['error']} –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_info = await bot.get_chat(user_id)
        user_name = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        username = user_info.username
    except:
        await callback.answer(
            f"{EMOJI['error']} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.",
            show_alert=True
        )
        return
    
    await state.update_data(user_id=user_id, user_name=user_name)
    await state.set_state(AdminStates.waiting_day)
    
    keyboard = get_cancel_keyboard()
    text = (
        f"{EMOJI['success']} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"{format_user_info(user_id, user_name, username)}\n\n"
        f"{EMOJI['calendar']} –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (1-31):"
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
    await callback.message.edit_text(
        callback.message.text + f"\n\n{EMOJI['success']} <b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞—Ç!</b>",
        parse_mode='HTML'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–Ω—è
    await bot.send_message(
        callback.from_user.id,
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    admin_alias, _, _ = get_admin_settings(callback.from_user.id)
    try:
        await bot.send_message(
            user_id,
            f"{EMOJI['info']} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{escape_html(admin_alias)}</b> –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
            parse_mode='HTML'
        )
    except:
        pass

if __name__ == "__main__":
    asyncio.run(main())